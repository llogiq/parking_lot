initSidebarItems({"constant":[["ONCE_INIT","Initialization value for static `Once` values."]],"enum":[["RequeueOp","Operation that `unpark_requeue` should perform."],["UnparkResult","Result of an `unpark_one` operation."]],"fn":[["park","Parks the current thread in the queue associated with the given key."],["unpark_all","Unparks all threads in the queue associated with the given key."],["unpark_one","Unparks one thread from the queue associated with the given key."],["unpark_requeue","Removes all threads from the queue associated with `key_from`, optionally unparks the first one and requeues the rest onto the queue associated with `key_to`."]],"struct":[["Condvar","A Condition Variable"],["Mutex","A mutual exclusion primitive useful for protecting shared data"],["MutexGuard","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked."],["Once","A synchronization primitive which can be used to run a one-time initialization. Useful for one-time initialization for globals, FFI or related functionality."],["OnceState","State yielded to the `call_once_force` method which can be used to query whether the `Once` was previously poisoned or not."],["RwLock","A reader-writer lock"],["RwLockReadGuard","RAII structure used to release the shared read access of a lock when dropped."],["RwLockWriteGuard","RAII structure used to release the exclusive write access of a lock when dropped."],["WaitTimeoutResult","A type indicating whether a timed wait on a condition variable returned due to a time out or not."]]});